# -*- coding: utf-8 -*-
"""Tash_05.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UsCHySy5Bf-wiDORkAWd1D859w16Ox7_
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

df=pd.read_csv('/content/creditcard.csv',on_bad_lines='skip')

df.head()

df.info()

df.describe()

df.isnull().sum()

df.groupby('Class').mean()

data=df.drop(['Time'],axis=1)

count_classes =pd.value_counts(df['Class'], sort = True)
count_classes.plot(kind = 'bar', rot=0)
plt.title("Transaction Class Distribution")
plt.xlabel("Class")
plt.ylabel("Frequency")

data=df.sample(frac=0.1,random_state=1)
data.shape

f=df[df['Class']==1]
f.shape

n=df[df['Class']==0]
n.shape

print(f.Amount.describe())
print(n.Amount.describe())

fig,(ax1,ax2)=plt.subplots(2,1,sharex=True,figsize=(10,4))
fig.suptitle('Amount per transaction by class')
bins=50

ax1.hist(df[df['Class']==1].Amount,bins=bins)
ax1.set_title('Fraud')
ax2.hist(n.Amount,bins=bins)
ax2.set_title('Normal')
plt.xlabel('Amount ($)')
plt.ylabel('Number of Transactions')
plt.yscale('log')
plt.show

f=df[df['Class']==1]
n=df[df['Class']==0]
f.shape
n.shape

f=df[df['Class']==1]
n=df[df['Class']==0]
fr=len(f)
nr=len(n)
print(fr)
print(nr)

out_frac=len(f)/len(n)
print(out_frac)
print("Fraud Case :{}".format(fr))
print("Normal Case :{}".format(nr))

corr=df.corr()
t=corr.index
plt.figure(figsize=(20,20))
g=sns.heatmap(df[t].corr(),annot=True,cmap="RdYlGn")
#

n=n.sample(n=fr,random_state=2)
print(n.shape)

new=pd.concat([n,f],axis=0)
new.shape

x=data.drop('Class',axis=1)
y=data['Class']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)

model=LogisticRegression()
model.fit(x_train,y_train)

x_train_prediction=model.predict(x_train)
training_data_accuracy=accuracy_score(x_train_prediction,y_train)*100
print('Accuracy on Training data : ', training_data_accuracy)

x_test_prediction=model.predict(x_test)
test_data_accuracy=accuracy_score(x_test_prediction,y_test)

test_data_accuracy= accuracy_score(x_test_prediction,y_test)*100
print('Accuracy score on Test Data : ', test_data_accuracy)